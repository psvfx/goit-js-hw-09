{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAKwD,SAA/CC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCC,YAAW,KACTJ,EAAQ,C,SAAEH,E,MAAUC,GAAQ,GAC3BA,GAEHM,YAAW,KACTH,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC1BA,EAAM,G,CAMU,MAAnBO,EAASC,SAASC,cAAc,SAGsDF,EAArFG,iBAAiB,UAAU,SAAUC,GAEhBA,EAApBC,iBAGqB,MAArBC,EAAaN,EAAOO,SAASd,MAC7Be,EAAYR,EAAOO,SAASE,KAC5BC,EAAcV,EAAOO,SAASI,OAG9BC,EAAaC,SAASP,EAAWQ,OACjCL,EAAOI,SAASL,EAAUM,OAC1BH,EAASE,SAASH,EAAYI,OAcqF,IAApH,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,GAAK,EAC/BxB,EAAcwB,EAAGH,EAAaH,EAAOM,GAClCC,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoB7B,QAAiBC,MAAU,IAMvDO,EAAOsB,O","sources":["src/js/03-promises.js"],"sourcesContent":["'use strict';\n// Підключення бібліотеки для неблокуючих сповіщень на стороні клієнта:\nimport Notiflix from 'notiflix';\n\n//Функція повернення нового промісу випадковим чином із затримкою:\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      setTimeout(() => {\n        resolve({ position, delay });\n      }, delay);\n    } else {\n      setTimeout(() => {\n        reject({ position, delay });\n      }, delay);\n    }\n  });\n}\n\n// Отримання посилання до форми:\nconst formEl = document.querySelector('.form');\n\n// Прослуховування події відправки форми та виклику функції-обробника події, яка перевіряє введені дані форми:\nformEl.addEventListener('submit', function (event) {\n  // Скидання дефолтної поведінки\n  event.preventDefault();\n\n  // Зчитування значень полів форми:\n  const delayInput = formEl.elements.delay;\n  const stepInput = formEl.elements.step;\n  const amountInput = formEl.elements.amount;\n\n  // Перетворення на числа значень полів форми:\n  const firstDelay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  // // Цикл створення зазначеної кількості промісів з відповідними затримками та виводами повідомлень у консоль виконання методів then або catch:\n  // for (let i = 0; i < amount; i += 1) {\n  //   createPromise(i, firstDelay + step * i)\n  //     .then(({ position, delay }) => {\n  //       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  //     })\n  //     .catch(({ position, delay }) => {\n  //       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  //     });\n  // }\n\n  // Цикл створення зазначеної кількості промісів з відповідними затримками та виводами повідомлень користувачеві, використовуючи бібліотеку notiflix:\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i, firstDelay + step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n\n  // Скидання в формі введених даних:\n  formEl.reset();\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","setTimeout","$47d4ff9957288465$var$formEl","document","querySelector","addEventListener","event","preventDefault","delayInput","elements","stepInput","step","amountInput","amount","firstDelay","parseInt","value","i","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.dc6e6d76.js.map"}